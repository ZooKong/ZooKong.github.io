{"pages":[],"posts":[{"title":"Elasticsearch-01 : 엘라스틱서치 개요 및 특징","text":"1. 엘라스틱서치(Elasticsearch)란?엘라스틱서치(Elasticsearch)는 루씬(Lucene) 기반의 검색 엔진입니다. 여기서 루씬(Lucene)은 자바로 개발된 오픈소스 정보검색 라이브러리입니다. 따라서 엘라스틱서치(Elasticsearch) 자바로 개발되었으며 오픈 소스로 출시되었습니다. 게다가 다양한 언어(자바, 닷넷(C#), PHP, 파이썬, 그루비 등) 클라이언트를 지원합니다. 엘라스틱서치(Elasticsearch)는 로그스태시(Logstash)라는 이름의 데이터 수집 및 로그 파싱 엔진, 그리고 키바나(Kibana)라는 이름의 분석 및 시각화 플랫폼과 함께 개발되었습니다. 이를 엘라스틱서치(Elasticsearch) + 로그스태시(Logstash) + 키바나(Kibana)를 같이 연동하여 사용한다는 의미로 ELK 혹은 ELK 스택(ELK Stack)라고 합니다. 2. 일래스틱서치(Elasticsearch)의 특징엘라스틱서치(Elasticsearch)의 특징은 아래와 같습니다. 설치 과정이 간단한 편, 우분투같은 데비안 기반 운영체제면 apt-get으로도 쉽게 설치 가능 노드라고 불리는 프로세스 단위로 구성되어 있는데, 확장이 필요하다면 그저 새 노드를 실행하고 기존의 노드와 연결하여 scale-out이 매우 간단함 데이터를 저장한 뒤 검색하기 위해 재실행과 같은 과정이 필요없음, 인덱싱만 끝나면 검색이 가능 하나의 인덱스에 하나의 타입만을 구성할 수 있음 HTTP를 통해 JSON 형식의 Restful API를 사용할 수 있음 오픈소스이므로, 다양한 기능의 플러그인이 존재 하나 이상의 노드가 실행되면서, 죽은 노드가 있을 경우 자동으로 감지 후 다른 노드에게 맡기며 매우 안정적인 서비스를 보장 비정형 로그 데이터를 수집하고 한곳에 모아 통계 분석을 할 수 있음 전체적인 클러스터의 성능 향상을 위해 비용 소모가 큰 롤백과 트랜잭션 기능이 없음 데이터 저장 시점에 해당 데이터를 색인한 색인된 데이터는 1초 뒤에나 검색이 가능해져서 실시간으로 검색이 불가능. 또한 내부적으로 커밋(commit), 플러쉬(Flush)와 같은 복잡한 과정 업데이트는 기존 문서를 삭제(delete)하고 다시 삽입(insert)하는 방식 ELK 스택을 구성하여 활용할 수 있음","link":"/2022/03/28/elasticsearch/elasticsearch-01/"},{"title":"Linux 명령어 정리","text":"curl : http 요청 http 요청 1curl --location --request GET 'http://127.0.0.1:8401/v1/example?test=1' --header 'Content-Type: application/x-www-form-urlencoded' --header 'TEST: 4406c3c04215d36e36f964582b869e0d7c8eec8482e793e5512a08abd39516d6' http 요청 응답 시간 확인 1curl -o /dev/null -s -w %{time_total} --location --request GET 'http://127.0.0.1:8401/v1/example?test=1' --header 'Content-Type: application/x-www-form-urlencoded' --header 'TEST: 4406c3c04215d36e36f964582b869e0d7c8eec8482e793e5512a08abd39516d6' 서버 Core 확인 http 요청 응답 시간 확인 서버 용량 확인 현재 마운트된 디스크 크기, 사용량, 남은 용량 확인 1df -h 하위 디렉토리 제외하고 현재 디록토리 용량 확인 1du -hd 0 ./* 파일 압축, 압축 풀기 특정 폴더 zip 으로 압축하기1zip -r backup.zip backup/","link":"/2022/04/01/linux/command/"},{"title":"npm 명령어 정리","text":"npm 버전 확인1npm -v npm 버전 최신화1npm install -g npm","link":"/2022/04/01/npm/command/"},{"title":"Spring Framework : Component Scan에 관하여","text":"클래스 다이어 그램 화살표","link":"/2022/04/01/spring/component_scan/"},{"title":"Spring Framework : DispatcherServlet에 관하여","text":"1. Web.xml ? Web.xml은 WebApplication의 Deployment Descriptor(배포 설명자)이며 XML 형식 애플리케이션의 클래스, 리소스, 구성 및 웹 서버가 이를 사용해서 웹 요청을 처리하는 방법을 기술 context.xml에서 WatchedResource를 통해 “WEB-INF/web.xml” 를 수정할 수 있음 2. Web.xml 작성 예시아래와 같은 내용이 일반적으로 등장함. 12345678910111213141516171819&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/*-config.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;display-name&gt;SpringContextLoader&lt;/display-name&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/dispatcher-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt; 3. ContextLoaderListener 클래스 다이어그램 최초에 웹 애플리케이션이 실행되며 “context-param” 태그로 지정된 “contextConfigLocation”의 값을 읽음 “context-param” 태그에 지정된 “ContextLoaderListener” 클래스를 통해 애플리케이션이 구동되었음을 감지 “ContextLoaderListener” 는 java의 확장 패키지은 javax에 속해 있는 “ServletContextListener”를 구현함 “ServletContextListener”는 서블릿 컨텍스트에 대한 변경 사항에 대해 이벤트 형식으로 받을 수 잇음 “ContextLoaderListener” 는 spring-web의 클래스인 “ContextLoader”를 상속함 “ContextLoader”는 “Root WebApplicationContext” 를 초기화 하는 작업을 수행 4. ContextLoaderListener 수행 “ContextLoaderListener”는 단순히 contextInitialized(…) 메서드를 통해 “context-param” 태그로 설정한 값을 전달받아 ContextLoader의 initWebApplicationContext(…)를 호출함 호출된 “initWebApplicationContext” 메서드 내부에는 context를 생성하는 과정을 거쳐 “servletContext”의 Attribute로 생성된 context를 저장. 여기서 해당 context의 저장할 때의 키를 “ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE”로 지정하는 것을 확인 5. ContextLoaderListener 정리6. DispatcherServlet 클래스 다이어그램7. DispatcherServlet 수행8. DispatcherServlet 정리9. DispatcherServlet 에 관한 최종 정리","link":"/2022/04/04/spring/dispatcherServlet/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","link":"/tags/Elasticsearch/"},{"name":"Logstash","slug":"Logstash","link":"/tags/Logstash/"},{"name":"Kibana","slug":"Kibana","link":"/tags/Kibana/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Linux Command","slug":"Linux-Command","link":"/tags/Linux-Command/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Spring Framework","slug":"Spring-Framework","link":"/tags/Spring-Framework/"},{"name":"Component Scan","slug":"Component-Scan","link":"/tags/Component-Scan/"},{"name":"DispatcherServlet","slug":"DispatcherServlet","link":"/tags/DispatcherServlet/"}],"categories":[{"name":"Search Engine","slug":"Search-Engine","link":"/categories/Search-Engine/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"npm","slug":"npm","link":"/categories/npm/"},{"name":"Spring Framework","slug":"Spring-Framework","link":"/categories/Spring-Framework/"}]}